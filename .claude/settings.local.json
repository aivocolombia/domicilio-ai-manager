{
  "permissions": {
    "allow": [
      "Bash(VITE_SUPABASE_URL=https://hcyxhuvyqvtlvfsnrhjw.supabase.co VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhjeXhodXZ5cXZ0bHZmc25yaGp3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNjA2NTksImV4cCI6MjA2NzczNjY1OX0.NvBEq1Nofeu04OMRtd7Bwn_Je5MkmALSIm3kN-HkT0Y node -e \"const { createClient } = require(''@supabase/supabase-js''); const supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY); console.log(''Re-enabling Mazorca topping...''); supabase.from(''sede_toppings'').update({ available: true }).eq(''sede_id'', ''310368ae-1ab6-49bb-908b-8f95a77581f8'').eq(''topping_id'', 2).then(r => { console.log(''Enable result:'', r.error ? r.error.message : ''SUCCESS''); return supabase.from(''sede_toppings'').select(''topping_id, available, toppings!inner(name)'').eq(''sede_id'', ''310368ae-1ab6-49bb-908b-8f95a77581f8'').eq(''topping_id'', 2); }).then(r => console.log(''Mazorca topping status:'', r.data));\")",
      "Bash(VITE_SUPABASE_URL=https://hcyxhuvyqvtlvfsnrhjw.supabase.co VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhjeXhodXZ5cXZ0bHZmc25yaGp3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNjA2NTksImV4cCI6MjA2NzczNjY1OX0.NvBEq1Nofeu04OMRtd7Bwn_Je5MkmALSIm3kN-HkT0Y node -e \"const { createClient } = require(''@supabase/supabase-js''); const supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY); supabase.from(''ordenes'').select(''*'').limit(1).then(r => console.log(''Current ordenes schema:'', Object.keys(r.data?.[0] || {})));\")",
      "Bash(VITE_SUPABASE_URL=https://hcyxhuvyqvtlvfsnrhjw.supabase.co VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhjeXhodXZ5cXZ0bHZmc25yaGp3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNjA2NTksImV4cCI6MjA2NzczNjY1OX0.NvBEq1Nofeu04OMRtd7Bwn_Je5MkmALSIm3kN-HkT0Y node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\n// Test the orderStatusService logic\nclass OrderStatusService {\n  getValidOrderStatuses(currentStatuses = [], orderTypes = []) {\n    if (!currentStatuses || currentStatuses.length === 0) {\n      return [\n        { value: ''Recibidos'', label: ''Recibido'' },\n        { value: ''Cocina'', label: ''En Cocina'' },\n        { value: ''Camino'', label: ''En Camino'' },\n        { value: ''En espera'', label: ''En Espera'' },\n        { value: ''Entregados'', label: ''Entregado'' }\n      ];\n    }\n\n    const hasPickupOrders = orderTypes && orderTypes.some(type => type === ''pickup'');\n    const hasDeliveryOrders = orderTypes && orderTypes.some(type => type === ''delivery'');\n\n    const deliveryStatusFlow = {\n      ''Recibidos'': [''Cocina''],\n      ''Cocina'': [''Camino''],\n      ''Camino'': [''Entregados''],\n      ''Entregados'': []\n    };\n\n    const pickupStatusFlow = {\n      ''Recibidos'': [''Cocina''],\n      ''Cocina'': [''En espera''],\n      ''En espera'': [''Entregados''],\n      ''Entregados'': []\n    };\n\n    const validNextStates = new Set();\n    \n    currentStatuses.forEach(currentStatus => {\n      let nextStates = [];\n      \n      if (hasPickupOrders && !hasDeliveryOrders) {\n        nextStates = pickupStatusFlow[currentStatus] || [];\n      } else {\n        nextStates = deliveryStatusFlow[currentStatus] || [];\n      }\n      \n      nextStates.forEach(state => validNextStates.add(state));\n    });\n\n    const stateLabels = {\n      ''Recibidos'': ''Recibido'',\n      ''Cocina'': ''En Cocina'',\n      ''Camino'': ''En Camino'',\n      ''En espera'': ''En Espera'',\n      ''Entregados'': ''Entregado''\n    };\n\n    return Array.from(validNextStates).map(state => ({\n      value: state,\n      label: stateLabels[state] || state\n    }));\n  }\n}\n\nconst service = new OrderStatusService();\n\nconsole.log(''=== Testing sequential status transitions ==='');\nconsole.log();\n\n// Test 1: Delivery order progression\nconsole.log(''1. Delivery order from \"\"Recibidos\"\" status:'');\nconst deliveryStates = service.getValidOrderStatuses([''Recibidos''], [''delivery'']);\nconsole.log(''Valid next states:'', deliveryStates);\nconsole.log();\n\n// Test 2: Pickup order progression\nconsole.log(''2. Pickup order from \"\"Recibidos\"\" status:'');\nconst pickupStatesFromReceived = service.getValidOrderStatuses([''Recibidos''], [''pickup'']);\nconsole.log(''Valid next states:'', pickupStatesFromReceived);\nconsole.log();\n\n// Test 3: Pickup order from Cocina\nconsole.log(''3. Pickup order from \"\"Cocina\"\" status:'');\nconst pickupStatesFromKitchen = service.getValidOrderStatuses([''Cocina''], [''pickup'']);\nconsole.log(''Valid next states:'', pickupStatesFromKitchen);\nconsole.log();\n\n// Test 4: Delivery order from Cocina\nconsole.log(''4. Delivery order from \"\"Cocina\"\" status:'');\nconst deliveryStatesFromKitchen = service.getValidOrderStatuses([''Cocina''], [''delivery'']);\nconsole.log(''Valid next states:'', deliveryStatesFromKitchen);\nconsole.log();\n\n// Test 5: Mixed order types (should use delivery flow by default)\nconsole.log(''5. Mixed order types from \"\"Cocina\"\" status:'');\nconst mixedStates = service.getValidOrderStatuses([''Cocina''], [''delivery'', ''pickup'']);\nconsole.log(''Valid next states:'', mixedStates);\nconsole.log();\n\nconsole.log(''âœ… Sequential status transition tests completed'');\n\")"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "C:\\c\\Users\\USER\\Documents\\GitHub"
    ]
  }
}