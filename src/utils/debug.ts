// Utilidad para debuggear variables de ambiente en el frontend
export function debugEnv() {
  console.log('üîç Debugging environment variables...')
  console.log('VITE_SUPABASE_URL:', import.meta.env.VITE_SUPABASE_URL)
  console.log('VITE_SUPABASE_ANON_KEY:', import.meta.env.VITE_SUPABASE_ANON_KEY ? 'Presente' : 'Ausente')
  
  // Verificar si las variables est√°n definidas
  if (!import.meta.env.VITE_SUPABASE_URL) {
    console.error('‚ùå VITE_SUPABASE_URL no est√° definida')
  }
  
  if (!import.meta.env.VITE_SUPABASE_ANON_KEY) {
    console.error('‚ùå VITE_SUPABASE_ANON_KEY no est√° definida')
  }
  
  if (import.meta.env.VITE_SUPABASE_URL && import.meta.env.VITE_SUPABASE_ANON_KEY) {
    console.log('‚úÖ Todas las variables de ambiente est√°n presentes')
  }
}

// Funci√≥n para verificar la conexi√≥n de Supabase
export async function testSupabaseConnection() {
  try {
    const { createClient } = await import('@supabase/supabase-js')
    
    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
    const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY
    
    if (!supabaseUrl || !supabaseAnonKey) {
      console.error('‚ùå Variables de ambiente faltantes')
      return false
    }
    
    const supabase = createClient(supabaseUrl, supabaseAnonKey)
    
    // Probar conexi√≥n b√°sica
    const { data, error } = await supabase
      .from('profiles')
      .select('count')
      .limit(1)
    
    if (error) {
      console.error('‚ùå Error de conexi√≥n:', error.message)
      return false
    }
    
    console.log('‚úÖ Conexi√≥n a Supabase exitosa')
    return true
  } catch (error) {
    console.error('‚ùå Error general:', error)
    return false
  }
} 