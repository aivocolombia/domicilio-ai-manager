# üìÑ Documento t√©cnico: Modelo Entidad-Relaci√≥n (√ìrdenes y Productos)

## 1. Objetivo
Este documento describe la estructura de la base de datos relacionada con las √≥rdenes, productos, bebidas y otros elementos asociados.  
Sirve como gu√≠a para desarrolladores (por ejemplo, en Cursor) para entender las relaciones entre tablas y c√≥mo se maneja la informaci√≥n.

---

## 2. Resumen del Modelo Entidad-Relaci√≥n

El sistema gestiona pedidos (√≥rdenes) que pueden incluir **m√∫ltiples productos** y **m√∫ltiples bebidas**.  
Cada orden est√° asociada a un cliente, un repartidor y un pago, y puede tener tiempos estimados de entrega, extras y auditor√≠a de cambios.

**Relaciones principales:**
- **Cliente** (1) ‚Üí (N) **√ìrdenes**
- **Repartidor** (1) ‚Üí (N) **√ìrdenes**
- **Pago** (1) ‚Üí (1) **Orden**
- **Orden** (1) ‚Üí (N) **Ordenes_Productos**
- **Orden** (1) ‚Üí (N) **Ordenes_Bebidas**
- **Plato** (1) ‚Üí (N) **Ordenes_Productos**
- **Bebida** (1) ‚Üí (N) **Ordenes_Bebidas**
- **Plato** (1) ‚Üí (N) **Plato_Toppings**
- **Topping** (1) ‚Üí (N) **Plato_Toppings**

---

## 3. Tablas y Campos

### 3.1 `clientes`
- `id` **PK**
- `nombre` (TEXT)
- `telefono` (TEXT)
- `direccion` (TEXT)
- `created_at` (TIMESTAMPTZ)
- `updated_at` (TIMESTAMPTZ)

**Relaciones:**
- 1 cliente puede tener muchas √≥rdenes (`ordenes.cliente_id`).

---

### 3.2 `repartidores`
- `id` **PK**
- `disponible` (BOOLEAN)
- `nombre` (TEXT)
- `telefono` (TEXT)
- `placas` (TEXT)
- `created_at` (TIMESTAMPTZ)

**Relaciones:**
- 1 repartidor puede tener muchas √≥rdenes (`ordenes.repartidor_id`).

---

### 3.3 `pagos`
- `id` **PK**
- `type` (TEXT)
- `token` (TEXT / NULL)
- `status` (TEXT)
- `created_at` (TIMESTAMPTZ)
- `updated_at` (TIMESTAMPTZ)

**Relaciones:**
- 1 pago corresponde a 1 orden (`ordenes.payment_id`).

---

### 3.4 `ordenes`
- `id` **PK**
- `repartidor_id` **FK** ‚Üí `repartidores.id`
- `order_at` (TIMESTAMPTZ) ‚Äî antes `date`
- `status` (TEXT)
- `payment_id` **FK** ‚Üí `pagos.id`
- `base_eta` (INTERVAL) ‚Äî antes `time`
- `extra_eta` (INTERVAL) ‚Äî antes `add_time`
- `razon_tiempo_extra` (TEXT)
- `hora_entrega` (TIMESTAMPTZ)
- `created_at` (TIMESTAMPTZ)
- `observaciones` (TEXT)
- `cliente_id` **FK** ‚Üí `clientes.id`
- `eta_updates_count` (INTEGER) ‚Äî contador de cambios en ETA

**Relaciones:**
- 1 orden tiene muchos productos y muchas bebidas.
- Cada orden est√° ligada a un cliente, un repartidor y un pago.

---

### 3.5 `ordenes_platos`
- `id` **PK**
- `orden_id` **FK** ‚Üí `ordenes.id`
- `plato_id` **FK** ‚Üí `platos.id`
- `quantity` (INTEGER)
- `unit_price` (NUMERIC)
- `total_price` (NUMERIC, calculado)
- `created_at` (TIMESTAMPTZ)

**Relaciones:**
- Une √≥rdenes con platos (relaci√≥n N:N conceptual, materializada en esta tabla).

---

### 3.6 `ordenes_bebidas`
- `id` **PK**
- `orden_id` **FK** ‚Üí `ordenes.id`
- `bebidas_id` **FK** ‚Üí `bebidas.id`
- `quantity` (INTEGER)
- `unit_price` (NUMERIC)
- `total_price` (NUMERIC, calculado)
- `created_at` (TIMESTAMPTZ)

**Relaciones:**
- Une √≥rdenes con bebidas (relaci√≥n N:N conceptual, materializada en esta tabla).

---

### 3.7 `platos`
*(Datos ya existentes)*
- `id` **PK**
- `nombre` (TEXT)
- `precio` (NUMERIC)
- Otros campos seg√∫n definici√≥n

---

### 3.8 `bebidas`
*(Datos ya existentes)*
- `id` **PK**
- `nombre` (TEXT)
- `precio` (NUMERIC)
- Otros campos seg√∫n definici√≥n

---

### 3.9 `toppings`
*(Datos ya existentes)*
- `id` **PK**
- `nombre` (TEXT)
- `precio` (NUMERIC)
- Otros campos seg√∫n definici√≥n

---

### 3.10 `plato_toppings`
- `plato_id` **FK** ‚Üí `platos.id`
- `topping_id` **FK** ‚Üí `toppings.id`
- `created_at` (TIMESTAMPTZ)

**Relaciones:**
- Relaci√≥n N:N entre `platos` y `toppings`.

---

## 4. Notas sobre Datos y Ejemplos

- **ID Autoincrementales**: en `ordenes`, `ordenes_platos`, `ordenes_bebidas`, `clientes`, `repartidores`, `pagos`.
- **Tipos de fecha/hora**: usar `TIMESTAMPTZ` para momentos exactos y `INTERVAL` para duraciones.
- **ON DELETE CASCADE**: recomendable en tablas de detalle (`ordenes_platos`, `ordenes_bebidas`, `plato_toppings`).
- **Dummy Data**: usar `RETURNING` para encadenar inserts y evitar errores de FK.
- **Auditor√≠a**: `eta_updates_count` debe actualizarse con trigger cuando cambie `base_eta` o `extra_eta`.

---

## 5. Buenas Pr√°cticas

1. **Evitar nombres reservados** (`date`, `time`, etc.) usando alias m√°s descriptivos.
2. **Mantener integridad referencial** con `FOREIGN KEY` y cascadas.
3. **Separar datos est√°ticos** (productos, bebidas, toppings) de datos din√°micos (√≥rdenes, pagos).
4. **Usar √≠ndices** en campos de b√∫squeda frecuente (`status`, `cliente_id`, `repartidor_id`, `hora_entrega`).
5. **Documentar relaciones** en diagramas o comentarios en el c√≥digo para facilitar mantenimiento.

---
